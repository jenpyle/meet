{"version":3,"sources":["Event.js","EventList.js","CitySearch.js","NumberOfEvents.js","mock-data.js","api.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Event","state","buttonLabel","toggleshowingDetails","setState","eventData","this","props","Container","Row","Col","Accordion","Card","className","Header","summary","start","dateTime","end","timeZone","Toggle","as","Button","variant","eventKey","onClick","Collapse","Body","Title","Text","description","href","target","organizer","email","htmlLink","Component","EventList","events","map","event","id","CitySearch","query","suggestions","showSuggestions","undefined","handleInputChanged","value","locations","filter","location","toUpperCase","indexOf","handleItemClicked","suggestion","updateEvents","Form","Group","controlId","Label","column","md","Control","type","placeholder","onChange","onFocus","ListGroup","style","display","Item","action","NumberOfEvents","numberEvents","defaultValue","mockData","JSON","parse","stringify","kind","etag","status","created","updated","creator","self","recurringEventId","originalStartTime","iCalUID","sequence","reminders","useDefault","eventType","extractLocations","Set","checkToken","accessToken","a","fetch","then","res","json","catch","error","result","removeQuery","window","history","pushState","pathname","newurl","protocol","host","getEvents","NProgress","startsWith","done","getAccessToken","token","url","axios","get","data","localStorage","setItem","getItem","tokenCheck","removeItem","searchParams","URLSearchParams","search","code","results","authUrl","App","locationEvents","mounted","Boolean","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.f99bebc1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Container, Row, Col, Button, Card, Accordion } from 'react-bootstrap';\r\n\r\nclass Event extends Component {\r\n  state = {\r\n    buttonLabel: 'Show Details',\r\n  };\r\n\r\n  toggleshowingDetails = () => {\r\n    if (this.state.buttonLabel === 'Show Details') {\r\n      this.setState({\r\n        buttonLabel: 'Hide Details',\r\n      });\r\n    } else {\r\n      this.setState({\r\n        buttonLabel: 'Show Details',\r\n      });\r\n    }\r\n  };\r\n  render() {\r\n    const { eventData } = this.props;\r\n    const { buttonLabel } = this.state;\r\n    return (\r\n      <Container>\r\n        <Row>\r\n          <Col>\r\n            <Accordion>\r\n              <Card className=\"Event\">\r\n                <Card.Header className=\"details\">\r\n                  <h2 className=\"title\">{eventData.summary}</h2>\r\n\r\n                  <div>Start: {eventData.start.dateTime}</div>\r\n                  <div> End: {eventData.end.dateTime}</div>\r\n                  <div>TimeZone: {eventData.start.timeZone}</div>\r\n\r\n                  <Accordion.Toggle\r\n                    as={Button}\r\n                    variant=\"link\"\r\n                    eventKey=\"0\"\r\n                    className=\"detailsButton\"\r\n                    onClick={this.toggleshowingDetails}\r\n                  >\r\n                    {buttonLabel}\r\n                  </Accordion.Toggle>\r\n                </Card.Header>\r\n                <Accordion.Collapse eventKey=\"0\">\r\n                  <Card.Body className=\"moreDetails\">\r\n                    <Card.Title>About Event</Card.Title>\r\n                    <Card.Text>\r\n                      {eventData.description}{' '}\r\n                      <h6>\r\n                        Contact:\r\n                        <a href=\"mailto:{eventData.organizer.email}\" target=\"_blank\">\r\n                          {eventData.organizer.email}\r\n                        </a>\r\n                      </h6>\r\n                      <Button variant=\"primary\" href={eventData.htmlLink} target=\"_blank\">\r\n                        View in Google Calendar\r\n                      </Button>\r\n                    </Card.Text>\r\n                  </Card.Body>\r\n                </Accordion.Collapse>\r\n              </Card>\r\n            </Accordion>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\nexport default Event;\r\n","import React, { Component } from 'react';\r\nimport Event from './Event'; // in src/EventList.js\r\n\r\nclass EventList extends Component {\r\n  render() {\r\n    const { events } = this.props;\r\n    return (\r\n      <ul className=\"EventList\">\r\n        {events.map((event) => (\r\n          <li key={event.id}>\r\n            <Event eventData={event} />\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventList;\r\n","import React, { Component } from 'react';\r\nimport { Form, Row, Col, ListGroup } from 'react-bootstrap';\r\n\r\nclass CitySearch extends Component {\r\n  state = {\r\n    query: '',\r\n    suggestions: [],\r\n    showSuggestions: undefined,\r\n  };\r\n\r\n  handleInputChanged = (event) => {\r\n    /*changes state of query and suggestions on change\r\nlike typing on the keyboard\r\n  */\r\n    const value = event.target.value;\r\n    const suggestions = this.props.locations.filter((location) => {\r\n      return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\r\n    }); /**filter the state of suggestions and use the result as the state’s new value */\r\n    this.setState({ query: value, suggestions });\r\n  };\r\n\r\n  handleItemClicked = (suggestion) => {\r\n    this.setState({\r\n      query: suggestion,\r\n      showSuggestions: false,\r\n    });\r\n    this.props.updateEvents(suggestion);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"CitySearch\">\r\n        <Form>\r\n          <Form.Group as={Row} controlId=\"formPlaintextPassword\">\r\n            <Form.Label column md=\"6\">\r\n              Search for events near you:\r\n            </Form.Label>\r\n            <Col md=\"6\">\r\n              <Form.Control\r\n                type=\"text\"\r\n                className=\"city\"\r\n                placeholder=\"Search cities\"\r\n                value={this.state.query}\r\n                onChange={this.handleInputChanged}\r\n                onFocus={() => {\r\n                  this.setState({ showSuggestions: true });\r\n                }}\r\n              />\r\n            </Col>\r\n          </Form.Group>\r\n        </Form>\r\n        <ListGroup className=\"suggestions\" style={this.state.showSuggestions ? {} : { display: 'none' }}>\r\n          {this.state.suggestions.map((suggestion) => (\r\n            <ListGroup.Item\r\n              className=\"list-item\"\r\n              action\r\n              key={suggestion}\r\n              onClick={() => this.handleItemClicked(suggestion)}\r\n            >\r\n              {suggestion}\r\n            </ListGroup.Item>\r\n          ))}\r\n          <ListGroup.Item className=\"list-item\" action onClick={() => this.handleItemClicked('all')}>\r\n            See all cities\r\n          </ListGroup.Item>\r\n        </ListGroup>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CitySearch;\r\n","import React, { Component } from 'react';\r\nimport { Form, Row, Col } from 'react-bootstrap';\r\n\r\nclass NumberOfEvents extends Component {\r\n  state = {\r\n    numberEvents: 32,\r\n  };\r\n\r\n  handleInputChanged = (event) => {\r\n    const value = event.target.value;\r\n    this.setState({\r\n      numberEvents: value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { numberEvents } = this.state;\r\n    return (\r\n      <div className=\"NumberOfEvents\">\r\n        <Form>\r\n          <Form.Group as={Row} controlId=\"formPlaintextPassword\">\r\n            <Form.Label column md=\"6\">\r\n              Number of Events:\r\n            </Form.Label>\r\n            <Col md=\"6\">\r\n              <Form.Control\r\n                className=\"numEventInput\"\r\n                type=\"number\"\r\n                placeholder=\"Enter number of events to view\"\r\n                defaultValue={numberEvents}\r\n                onChange={this.handleInputChanged}\r\n              />\r\n            </Col>\r\n          </Form.Group>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default NumberOfEvents;\r\n","const mockDataJSON = [\r\n  {\r\n    kind: 'calendar#event',\r\n    etag: '\"3181161784712000\"',\r\n    id: '4eahs9ghkhrvkld72hogu9ph3e_20200519T140000Z',\r\n    status: 'confirmed',\r\n    htmlLink:\r\n      'https://www.google.com/calendar/event?eid=NGVhaHM5Z2hraHJ2a2xkNzJob2d1OXBoM2VfMjAyMDA1MTlUMTQwMDAwWiBmdWxsc3RhY2t3ZWJkZXZAY2FyZWVyZm91bmRyeS5jb20',\r\n    created: '2020-05-19T19:17:46.000Z',\r\n    updated: '2020-05-27T12:01:32.356Z',\r\n    summary: 'Learn JavaScript',\r\n    description:\r\n      'Have you wondered how you can ask Google to show you the list of the top ten must-see places in London? And how Google presents you the list? How can you submit the details of an application? Well, JavaScript is doing these. :) \\n\\nJavascript offers interactivity to a dull, static website. Come, learn JavaScript with us and make those beautiful websites.',\r\n    location: 'London, UK',\r\n    creator: {\r\n      email: 'fullstackwebdev@careerfoundry.com',\r\n      self: true,\r\n    },\r\n    organizer: {\r\n      email: 'fullstackwebdev@careerfoundry.com',\r\n      self: true,\r\n    },\r\n    start: {\r\n      dateTime: '2020-05-19T16:00:00+02:00',\r\n      timeZone: 'Europe/Berlin',\r\n    },\r\n    end: {\r\n      dateTime: '2020-05-19T17:00:00+02:00',\r\n      timeZone: 'Europe/Berlin',\r\n    },\r\n    recurringEventId: '4eahs9ghkhrvkld72hogu9ph3e',\r\n    originalStartTime: {\r\n      dateTime: '2020-05-19T16:00:00+02:00',\r\n      timeZone: 'Europe/Berlin',\r\n    },\r\n    iCalUID: '4eahs9ghkhrvkld72hogu9ph3e@google.com',\r\n    sequence: 0,\r\n    reminders: {\r\n      useDefault: true,\r\n    },\r\n    eventType: 'default',\r\n  },\r\n  {\r\n    kind: 'calendar#event',\r\n    etag: '\"3181159875584000\"',\r\n    id: '3qtd6uscq4tsi6gc7nmmtpqlct_20200520T120000Z',\r\n    status: 'confirmed',\r\n    htmlLink:\r\n      'https://www.google.com/calendar/event?eid=M3F0ZDZ1c2NxNHRzaTZnYzdubW10cHFsY3RfMjAyMDA1MjBUMTIwMDAwWiBmdWxsc3RhY2t3ZWJkZXZAY2FyZWVyZm91bmRyeS5jb20',\r\n    created: '2020-05-19T19:14:30.000Z',\r\n    updated: '2020-05-27T11:45:37.792Z',\r\n    summary: 'React is Fun',\r\n    description:\r\n      'Love HTML, CSS, and JS? Want to become a cool front-end developer? \\n\\nReact is one of the most popular front-end frameworks. There is a huge number of job openings for React developers in most cities. \\n\\nJoin us in our free React training sessions and give your career a new direction. ',\r\n    location: 'Berlin, Germany',\r\n    creator: {\r\n      email: 'fullstackwebdev@careerfoundry.com',\r\n      self: true,\r\n    },\r\n    organizer: {\r\n      email: 'fullstackwebdev@careerfoundry.com',\r\n      self: true,\r\n    },\r\n    start: {\r\n      dateTime: '2020-05-20T14:00:00+02:00',\r\n      timeZone: 'Europe/Berlin',\r\n    },\r\n    end: {\r\n      dateTime: '2020-05-20T15:00:00+02:00',\r\n      timeZone: 'Europe/Berlin',\r\n    },\r\n    recurringEventId: '3qtd6uscq4tsi6gc7nmmtpqlct',\r\n    originalStartTime: {\r\n      dateTime: '2020-05-20T14:00:00+02:00',\r\n      timeZone: 'Europe/Berlin',\r\n    },\r\n    iCalUID: '3qtd6uscq4tsi6gc7nmmtpqlct@google.com',\r\n    sequence: 0,\r\n    reminders: {\r\n      useDefault: true,\r\n    },\r\n    eventType: 'default',\r\n  },\r\n];\r\nconst mockData = JSON.parse(JSON.stringify(mockDataJSON)); //converting the JSON array to an array of normal JS objects\r\nexport { mockData };\r\n","/**\r\n *\r\n * @param {*} events:\r\n * The following function should be in the “api.js” file.\r\n * This function takes an events array, then uses map to create a new array with only locations.\r\n * It will also remove all duplicates by creating another new array using the spread operator and spreading a Set.\r\n * The Set will remove all duplicates from the array.\r\n */\r\nimport { mockData } from './mock-data';\r\nimport axios from 'axios';\r\nimport NProgress from 'nprogress';\r\n\r\nexport const extractLocations = (events) => {\r\n  var extractLocations = events.map((event) => event.location);\r\n  var locations = [...new Set(extractLocations)]; //removes duplicates\r\n  return locations;\r\n};\r\n\r\n/**This function takes the accessToken you found and checks whether it’s a valid\r\n * token or not. If it’s not, then you\r\n * follow the redirect logic and send the user to the Google Authorization screen. */\r\nconst checkToken = async (accessToken) => {\r\n  const result = await fetch(`https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`)\r\n    .then((res) => res.json())\r\n    .catch((error) => error.json());\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\nThis function takes your code and encodes it using encodeURIComponent, \r\nthen uses the encoded code to get your token\r\n */\r\nconst getToken = async (code) => {\r\n  const encodeCode = encodeURIComponent(code);\r\n  const { access_token } = await fetch(\r\n    'https://1hjwzwtdhj.execute-api.us-west-1.amazonaws.com/dev/api/token' + '/' + encodeCode\r\n  )\r\n    .then((res) => {\r\n      return res.json();\r\n    })\r\n    .catch((error) => error);\r\n\r\n  access_token && localStorage.setItem('access_token', access_token);\r\n\r\n  return access_token;\r\n};\r\n\r\n/**\r\n * check whether there’s a path, then build the URL with the current path\r\n * (or build the URL without a path using window.history.pushState())\r\n */\r\nconst removeQuery = () => {\r\n  if (window.history.pushState && window.location.pathname) {\r\n    var newurl = window.location.protocol + '//' + window.location.host + window.location.pathname;\r\n    window.history.pushState('', '', newurl);\r\n  } else {\r\n    newurl = window.location.protocol + '//' + window.location.host;\r\n    window.history.pushState('', '', newurl);\r\n  }\r\n};\r\n\r\nexport const getEvents = async () => {\r\n  NProgress.start();\r\n\r\n  if (window.location.href.startsWith('http://localhost')) {\r\n    NProgress.done();\r\n    return mockData;\r\n  }\r\n\r\n  const token = await getAccessToken();\r\n\r\n  if (token) {\r\n    removeQuery();\r\n    const url = 'https://1hjwzwtdhj.execute-api.us-west-1.amazonaws.com/dev/api/get-events' + '/' + token;\r\n    const result = await axios.get(url);\r\n    if (result.data) {\r\n      var locations = extractLocations(result.data.events);\r\n      localStorage.setItem('lastEvents', JSON.stringify(result.data));\r\n      localStorage.setItem('locations', JSON.stringify(locations));\r\n    }\r\n    NProgress.done();\r\n    return result.data.events;\r\n  }\r\n};\r\n\r\nexport const getAccessToken = async () => {\r\n  const accessToken = localStorage.getItem('access_token');\r\n  const tokenCheck = accessToken && (await checkToken(accessToken));\r\n\r\n  if (!accessToken || tokenCheck.error) {\r\n    await localStorage.removeItem('access_token');\r\n    const searchParams = new URLSearchParams(window.location.search);\r\n    const code = await searchParams.get('code');\r\n    if (!code) {\r\n      const results = await axios.get('https://1hjwzwtdhj.execute-api.us-west-1.amazonaws.com/dev/api/get-auth-url');\r\n      const { authUrl } = results.data;\r\n      return (window.location.href = authUrl);\r\n    }\r\n    return code && getAccessToken(code);\r\n  }\r\n  return accessToken;\r\n};\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport EventList from './EventList';\r\nimport CitySearch from './CitySearch';\r\nimport NumberOfEvents from './NumberOfEvents';\r\nimport { extractLocations, getEvents } from './api';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport './nprogress.css';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    events: [],\r\n    locations: [],\r\n  };\r\n\r\n  componentDidMount() {\r\n    /**\r\n   * load events when the app loads.\r\n    make the API call and save the initial data to state\r\n   */\r\n    this.mounted = true;\r\n    getEvents().then((events) => {\r\n      if (this.mounted) {\r\n        /**look at componentWillUnmount */\r\n        this.setState({ events, locations: extractLocations(events) });\r\n      }\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    /*\r\n    to fix issue with unmounting before getEvents API call is finished, we\r\n    use this boolean to update the state only if this.mounted is true\r\n    */\r\n    this.mounted = false;\r\n  }\r\n\r\n  updateEvents = (location) => {\r\n    getEvents().then((events) => {\r\n      const locationEvents = location === 'all' ? events : events.filter((event) => event.location === location);\r\n      this.setState({\r\n        events: locationEvents,\r\n      });\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <Row>\r\n          <Col>\r\n            <div className=\"App\">\r\n              <CitySearch locations={this.state.locations} updateEvents={this.updateEvents} />\r\n              <NumberOfEvents />\r\n              <EventList events={this.state.events} />\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","// The entry point of my build\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App'; //importing App.js\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.unregister();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}